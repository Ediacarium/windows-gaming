pub parse -> Vec<Part>
    = blank* sections:section* parse:(eof { Vec::new() } / parse:(comment_block parse:parse { parse }) { parse }) {
        let mut sections = sections.clone();
        sections.extend(parse);
        sections
    }

section -> Part
    = doc:doc obj:object { Part { description: doc, object: obj } }

object -> Object
    = blank* obj:block __ comment? blank* {
        let obj = obj.replace('\'', "\"");
        println!("{}", obj);
        serde_json::from_str(&obj).unwrap()
    }

block -> String
    = "{" inner:block_inner* "}" {
        inner.iter().fold("{".to_string(), |s, t| s + &t) + "}"
    }

block_inner -> String
    = s:block { s }
    / comment { "".to_string() }
    / s:$((!"}" .)) { s.to_string() }

doc -> Doc
    = desc:description { Doc::Parsed(desc) }
    / desc:$(comment_block) { Doc::Unparsed(desc.to_string()) }

description -> Description
    = desc_start desc_blank* name:desc_name desc_blank* desc:desc_doc desc_blank* rest:(rest:desc_rest desc_blank { rest })* desc_blank*
      ex:desc_example {
        Description {
            name: name,
            documentation: desc,
            example: ex,
            rest: rest,
        }
    }

desc_start = "##" __ eol

desc_name -> String
    = "#" __ "@" name:name ":" __ eol { name }

desc_blank = ("#"* __ eol)

desc_doc -> String
    = doc:(!desc_rest "#" __ doc:desc_multiline desc_blank { doc })* { doc.join("") }

desc_rest -> Rest
    = arg:desc_arg { arg }
    / ret:desc_returns { ret }
    / since:desc_since { since }
    / note:desc_note { note }

desc_arg -> Rest
    = "#" __ "@" name:name ":" __ doc:desc_multiline { Rest::Parameter((name.to_string(), doc.to_string())) }

desc_returns -> Rest
    = "#" __ "Returns" ":"? __ returns:desc_multiline { Rest::Returns(returns.to_string()) }

desc_since -> Rest
    = "#" __ "Since" ":"? __ since:$([0-9]+ "." [0-9]+ ("." [0-9]+)*) __ eol { Rest::Since(since.to_string()) }

desc_note -> Rest
    = "#" __ "Note" ":"? __ note:desc_multiline { Rest::Note(note) }

// TODO: Parse example
desc_example -> String
    = "#" __ "Example:" __ eol s:$((comment_block)) { s.to_string() }

desc_multiline -> String
    = doc:$((!eol .)*) eol nexts:desc_multiline_next* { doc.to_string() + &nexts.join("") }

desc_multiline_next -> String
    = !desc_blank "#" __ doc:$((!eol .)*) eol { doc.to_string() }

name -> String = s:$([a-zA-Z_][a-zA-Z_0-9\-]*) { s.to_string() }

comment_block = comment+
comment = "#" line

line = (!eol .)* eol
blank = __ eol
__ = #quiet<whitespace*>

/* Modeled after ECMA-262, 5th ed., 7.3. */
eol
    = "\n"
    / "\r\n"
    / "\r"
    / "\u{2028}"
    / "\u{2029}"

/* Modeled after ECMA-262, 5th ed., 7.2. */
whitespace
    = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

eof = !.
