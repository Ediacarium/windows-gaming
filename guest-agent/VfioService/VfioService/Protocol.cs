// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientpipe-proto/src/protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ClientpipeProtocol {

  /// <summary>Holder for reflection information generated from clientpipe-proto/src/protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for clientpipe-proto/src/protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNjbGllbnRwaXBlLXByb3RvL3NyYy9wcm90b2NvbC5wcm90bxITY2xpZW50",
            "cGlwZV9wcm90b2NvbBobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvIvUB",
            "ChBDbGlwYm9hcmRNZXNzYWdlEjAKDmdyYWJfY2xpcGJvYXJkGAEgASgLMhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5SAASSAoacmVxdWVzdF9jbGlwYm9hcmRf",
            "Y29udGVudHMYAiABKA4yIi5jbGllbnRwaXBlX3Byb3RvY29sLkNsaXBib2Fy",
            "ZFR5cGVIABI8Cg1jb250ZW50X3R5cGVzGAMgASgLMiMuY2xpZW50cGlwZV9w",
            "cm90b2NvbC5DbGlwYm9hcmRUeXBlc0gAEhwKEmNsaXBib2FyZF9jb250ZW50",
            "cxgEIAEoDEgAQgkKB21lc3NhZ2UiQwoOQ2xpcGJvYXJkVHlwZXMSMQoFdHlw",
            "ZXMYASADKA4yIi5jbGllbnRwaXBlX3Byb3RvY29sLkNsaXBib2FyZFR5cGUi",
            "PAoOUmVnaXN0ZXJIb3RLZXkSCgoCaWQYASABKA0SEQoJbW9kaWZpZXJzGAIg",
            "ASgNEgsKA2tleRgDIAEoDSKaAgoIR2FDbWRPdXQSJgoEcGluZxgBIAEoCzIW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eUgAEjoKCWNsaXBib2FyZBgCIAEoCzIl",
            "LmNsaWVudHBpcGVfcHJvdG9jb2wuQ2xpcGJvYXJkTWVzc2FnZUgAEjMKEXJl",
            "bGVhc2VfbW9kaWZpZXJzGBAgASgLMhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "SAASKQoHc3VzcGVuZBgRIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eUgA",
            "Ej8KEHJlZ2lzdGVyX2hvdF9rZXkYEiABKAsyIy5jbGllbnRwaXBlX3Byb3Rv",
            "Y29sLlJlZ2lzdGVySG90S2V5SABCCQoHbWVzc2FnZSKKAgoHR2FDbWRJbhIm",
            "CgRwb25nGAEgASgLMhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5SAASLQoLcmVw",
            "b3J0X2Jvb3QYAiABKAsyFi5nb29nbGUucHJvdG9idWYuRW1wdHlIABI6Cglj",
            "bGlwYm9hcmQYAyABKAsyJS5jbGllbnRwaXBlX3Byb3RvY29sLkNsaXBib2Fy",
            "ZE1lc3NhZ2VIABIsCgpzdXNwZW5kaW5nGBAgASgLMhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5SAASEQoHaG90X2tleRgRIAEoDUgAEiAKFmhvdF9rZXlfYmlu",
            "ZGluZ19mYWlsZWQYEiABKAlIAEIJCgdtZXNzYWdlKi4KDUNsaXBib2FyZFR5",
            "cGUSCAoETm9uZRAAEggKBFRleHQQARIJCgVJbWFnZRACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ClientpipeProtocol.ClipboardType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientpipeProtocol.ClipboardMessage), global::ClientpipeProtocol.ClipboardMessage.Parser, new[]{ "GrabClipboard", "RequestClipboardContents", "ContentTypes", "ClipboardContents" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientpipeProtocol.ClipboardTypes), global::ClientpipeProtocol.ClipboardTypes.Parser, new[]{ "Types_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientpipeProtocol.RegisterHotKey), global::ClientpipeProtocol.RegisterHotKey.Parser, new[]{ "Id", "Modifiers", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientpipeProtocol.GaCmdOut), global::ClientpipeProtocol.GaCmdOut.Parser, new[]{ "Ping", "Clipboard", "ReleaseModifiers", "Suspend", "RegisterHotKey" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientpipeProtocol.GaCmdIn), global::ClientpipeProtocol.GaCmdIn.Parser, new[]{ "Pong", "ReportBoot", "Clipboard", "Suspending", "HotKey", "HotKeyBindingFailed" }, new[]{ "Message" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ClipboardType {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Text")] Text = 1,
    [pbr::OriginalName("Image")] Image = 2,
  }

  #endregion

  #region Messages
  public sealed partial class ClipboardMessage : pb::IMessage<ClipboardMessage> {
    private static readonly pb::MessageParser<ClipboardMessage> _parser = new pb::MessageParser<ClipboardMessage>(() => new ClipboardMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClipboardMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientpipeProtocol.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClipboardMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClipboardMessage(ClipboardMessage other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.GrabClipboard:
          GrabClipboard = other.GrabClipboard.Clone();
          break;
        case MessageOneofCase.RequestClipboardContents:
          RequestClipboardContents = other.RequestClipboardContents;
          break;
        case MessageOneofCase.ContentTypes:
          ContentTypes = other.ContentTypes.Clone();
          break;
        case MessageOneofCase.ClipboardContents:
          ClipboardContents = other.ClipboardContents;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClipboardMessage Clone() {
      return new ClipboardMessage(this);
    }

    /// <summary>Field number for the "grab_clipboard" field.</summary>
    public const int GrabClipboardFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty GrabClipboard {
      get { return messageCase_ == MessageOneofCase.GrabClipboard ? (global::Google.Protobuf.WellKnownTypes.Empty) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GrabClipboard;
      }
    }

    /// <summary>Field number for the "request_clipboard_contents" field.</summary>
    public const int RequestClipboardContentsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientpipeProtocol.ClipboardType RequestClipboardContents {
      get { return messageCase_ == MessageOneofCase.RequestClipboardContents ? (global::ClientpipeProtocol.ClipboardType) message_ : 0; }
      set {
        message_ = value;
        messageCase_ = MessageOneofCase.RequestClipboardContents;
      }
    }

    /// <summary>Field number for the "content_types" field.</summary>
    public const int ContentTypesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientpipeProtocol.ClipboardTypes ContentTypes {
      get { return messageCase_ == MessageOneofCase.ContentTypes ? (global::ClientpipeProtocol.ClipboardTypes) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ContentTypes;
      }
    }

    /// <summary>Field number for the "clipboard_contents" field.</summary>
    public const int ClipboardContentsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClipboardContents {
      get { return messageCase_ == MessageOneofCase.ClipboardContents ? (pb::ByteString) message_ : pb::ByteString.Empty; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        messageCase_ = MessageOneofCase.ClipboardContents;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      GrabClipboard = 1,
      RequestClipboardContents = 2,
      ContentTypes = 3,
      ClipboardContents = 4,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClipboardMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClipboardMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GrabClipboard, other.GrabClipboard)) return false;
      if (RequestClipboardContents != other.RequestClipboardContents) return false;
      if (!object.Equals(ContentTypes, other.ContentTypes)) return false;
      if (ClipboardContents != other.ClipboardContents) return false;
      if (MessageCase != other.MessageCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.GrabClipboard) hash ^= GrabClipboard.GetHashCode();
      if (messageCase_ == MessageOneofCase.RequestClipboardContents) hash ^= RequestClipboardContents.GetHashCode();
      if (messageCase_ == MessageOneofCase.ContentTypes) hash ^= ContentTypes.GetHashCode();
      if (messageCase_ == MessageOneofCase.ClipboardContents) hash ^= ClipboardContents.GetHashCode();
      hash ^= (int) messageCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.GrabClipboard) {
        output.WriteRawTag(10);
        output.WriteMessage(GrabClipboard);
      }
      if (messageCase_ == MessageOneofCase.RequestClipboardContents) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RequestClipboardContents);
      }
      if (messageCase_ == MessageOneofCase.ContentTypes) {
        output.WriteRawTag(26);
        output.WriteMessage(ContentTypes);
      }
      if (messageCase_ == MessageOneofCase.ClipboardContents) {
        output.WriteRawTag(34);
        output.WriteBytes(ClipboardContents);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.GrabClipboard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrabClipboard);
      }
      if (messageCase_ == MessageOneofCase.RequestClipboardContents) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestClipboardContents);
      }
      if (messageCase_ == MessageOneofCase.ContentTypes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentTypes);
      }
      if (messageCase_ == MessageOneofCase.ClipboardContents) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClipboardContents);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClipboardMessage other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.GrabClipboard:
          GrabClipboard = other.GrabClipboard;
          break;
        case MessageOneofCase.RequestClipboardContents:
          RequestClipboardContents = other.RequestClipboardContents;
          break;
        case MessageOneofCase.ContentTypes:
          ContentTypes = other.ContentTypes;
          break;
        case MessageOneofCase.ClipboardContents:
          ClipboardContents = other.ClipboardContents;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (messageCase_ == MessageOneofCase.GrabClipboard) {
              subBuilder.MergeFrom(GrabClipboard);
            }
            input.ReadMessage(subBuilder);
            GrabClipboard = subBuilder;
            break;
          }
          case 16: {
            message_ = input.ReadEnum();
            messageCase_ = MessageOneofCase.RequestClipboardContents;
            break;
          }
          case 26: {
            global::ClientpipeProtocol.ClipboardTypes subBuilder = new global::ClientpipeProtocol.ClipboardTypes();
            if (messageCase_ == MessageOneofCase.ContentTypes) {
              subBuilder.MergeFrom(ContentTypes);
            }
            input.ReadMessage(subBuilder);
            ContentTypes = subBuilder;
            break;
          }
          case 34: {
            ClipboardContents = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClipboardTypes : pb::IMessage<ClipboardTypes> {
    private static readonly pb::MessageParser<ClipboardTypes> _parser = new pb::MessageParser<ClipboardTypes>(() => new ClipboardTypes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClipboardTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientpipeProtocol.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClipboardTypes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClipboardTypes(ClipboardTypes other) : this() {
      types_ = other.types_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClipboardTypes Clone() {
      return new ClipboardTypes(this);
    }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::ClientpipeProtocol.ClipboardType> _repeated_types_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::ClientpipeProtocol.ClipboardType) x);
    private readonly pbc::RepeatedField<global::ClientpipeProtocol.ClipboardType> types_ = new pbc::RepeatedField<global::ClientpipeProtocol.ClipboardType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClientpipeProtocol.ClipboardType> Types_ {
      get { return types_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClipboardTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClipboardTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!types_.Equals(other.types_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= types_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      types_.WriteTo(output, _repeated_types_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += types_.CalculateSize(_repeated_types_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClipboardTypes other) {
      if (other == null) {
        return;
      }
      types_.Add(other.types_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterHotKey : pb::IMessage<RegisterHotKey> {
    private static readonly pb::MessageParser<RegisterHotKey> _parser = new pb::MessageParser<RegisterHotKey>(() => new RegisterHotKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterHotKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientpipeProtocol.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHotKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHotKey(RegisterHotKey other) : this() {
      id_ = other.id_;
      modifiers_ = other.modifiers_;
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHotKey Clone() {
      return new RegisterHotKey(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "modifiers" field.</summary>
    public const int ModifiersFieldNumber = 2;
    private uint modifiers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Modifiers {
      get { return modifiers_; }
      set {
        modifiers_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterHotKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterHotKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Modifiers != other.Modifiers) return false;
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Modifiers != 0) hash ^= Modifiers.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Modifiers != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Modifiers);
      }
      if (Key != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Modifiers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Modifiers);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterHotKey other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Modifiers != 0) {
        Modifiers = other.Modifiers;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Modifiers = input.ReadUInt32();
            break;
          }
          case 24: {
            Key = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GaCmdOut : pb::IMessage<GaCmdOut> {
    private static readonly pb::MessageParser<GaCmdOut> _parser = new pb::MessageParser<GaCmdOut>(() => new GaCmdOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GaCmdOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientpipeProtocol.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GaCmdOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GaCmdOut(GaCmdOut other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case MessageOneofCase.Clipboard:
          Clipboard = other.Clipboard.Clone();
          break;
        case MessageOneofCase.ReleaseModifiers:
          ReleaseModifiers = other.ReleaseModifiers.Clone();
          break;
        case MessageOneofCase.Suspend:
          Suspend = other.Suspend.Clone();
          break;
        case MessageOneofCase.RegisterHotKey:
          RegisterHotKey = other.RegisterHotKey.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GaCmdOut Clone() {
      return new GaCmdOut(this);
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty Ping {
      get { return messageCase_ == MessageOneofCase.Ping ? (global::Google.Protobuf.WellKnownTypes.Empty) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "clipboard" field.</summary>
    public const int ClipboardFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientpipeProtocol.ClipboardMessage Clipboard {
      get { return messageCase_ == MessageOneofCase.Clipboard ? (global::ClientpipeProtocol.ClipboardMessage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Clipboard;
      }
    }

    /// <summary>Field number for the "release_modifiers" field.</summary>
    public const int ReleaseModifiersFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty ReleaseModifiers {
      get { return messageCase_ == MessageOneofCase.ReleaseModifiers ? (global::Google.Protobuf.WellKnownTypes.Empty) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ReleaseModifiers;
      }
    }

    /// <summary>Field number for the "suspend" field.</summary>
    public const int SuspendFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty Suspend {
      get { return messageCase_ == MessageOneofCase.Suspend ? (global::Google.Protobuf.WellKnownTypes.Empty) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Suspend;
      }
    }

    /// <summary>Field number for the "register_hot_key" field.</summary>
    public const int RegisterHotKeyFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientpipeProtocol.RegisterHotKey RegisterHotKey {
      get { return messageCase_ == MessageOneofCase.RegisterHotKey ? (global::ClientpipeProtocol.RegisterHotKey) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RegisterHotKey;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Ping = 1,
      Clipboard = 2,
      ReleaseModifiers = 16,
      Suspend = 17,
      RegisterHotKey = 18,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GaCmdOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GaCmdOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(Clipboard, other.Clipboard)) return false;
      if (!object.Equals(ReleaseModifiers, other.ReleaseModifiers)) return false;
      if (!object.Equals(Suspend, other.Suspend)) return false;
      if (!object.Equals(RegisterHotKey, other.RegisterHotKey)) return false;
      if (MessageCase != other.MessageCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (messageCase_ == MessageOneofCase.Clipboard) hash ^= Clipboard.GetHashCode();
      if (messageCase_ == MessageOneofCase.ReleaseModifiers) hash ^= ReleaseModifiers.GetHashCode();
      if (messageCase_ == MessageOneofCase.Suspend) hash ^= Suspend.GetHashCode();
      if (messageCase_ == MessageOneofCase.RegisterHotKey) hash ^= RegisterHotKey.GetHashCode();
      hash ^= (int) messageCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Ping) {
        output.WriteRawTag(10);
        output.WriteMessage(Ping);
      }
      if (messageCase_ == MessageOneofCase.Clipboard) {
        output.WriteRawTag(18);
        output.WriteMessage(Clipboard);
      }
      if (messageCase_ == MessageOneofCase.ReleaseModifiers) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ReleaseModifiers);
      }
      if (messageCase_ == MessageOneofCase.Suspend) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Suspend);
      }
      if (messageCase_ == MessageOneofCase.RegisterHotKey) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(RegisterHotKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (messageCase_ == MessageOneofCase.Clipboard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clipboard);
      }
      if (messageCase_ == MessageOneofCase.ReleaseModifiers) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReleaseModifiers);
      }
      if (messageCase_ == MessageOneofCase.Suspend) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Suspend);
      }
      if (messageCase_ == MessageOneofCase.RegisterHotKey) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegisterHotKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GaCmdOut other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Ping:
          Ping = other.Ping;
          break;
        case MessageOneofCase.Clipboard:
          Clipboard = other.Clipboard;
          break;
        case MessageOneofCase.ReleaseModifiers:
          ReleaseModifiers = other.ReleaseModifiers;
          break;
        case MessageOneofCase.Suspend:
          Suspend = other.Suspend;
          break;
        case MessageOneofCase.RegisterHotKey:
          RegisterHotKey = other.RegisterHotKey;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (messageCase_ == MessageOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 18: {
            global::ClientpipeProtocol.ClipboardMessage subBuilder = new global::ClientpipeProtocol.ClipboardMessage();
            if (messageCase_ == MessageOneofCase.Clipboard) {
              subBuilder.MergeFrom(Clipboard);
            }
            input.ReadMessage(subBuilder);
            Clipboard = subBuilder;
            break;
          }
          case 130: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (messageCase_ == MessageOneofCase.ReleaseModifiers) {
              subBuilder.MergeFrom(ReleaseModifiers);
            }
            input.ReadMessage(subBuilder);
            ReleaseModifiers = subBuilder;
            break;
          }
          case 138: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (messageCase_ == MessageOneofCase.Suspend) {
              subBuilder.MergeFrom(Suspend);
            }
            input.ReadMessage(subBuilder);
            Suspend = subBuilder;
            break;
          }
          case 146: {
            global::ClientpipeProtocol.RegisterHotKey subBuilder = new global::ClientpipeProtocol.RegisterHotKey();
            if (messageCase_ == MessageOneofCase.RegisterHotKey) {
              subBuilder.MergeFrom(RegisterHotKey);
            }
            input.ReadMessage(subBuilder);
            RegisterHotKey = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class GaCmdIn : pb::IMessage<GaCmdIn> {
    private static readonly pb::MessageParser<GaCmdIn> _parser = new pb::MessageParser<GaCmdIn>(() => new GaCmdIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GaCmdIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientpipeProtocol.ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GaCmdIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GaCmdIn(GaCmdIn other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.Pong:
          Pong = other.Pong.Clone();
          break;
        case MessageOneofCase.ReportBoot:
          ReportBoot = other.ReportBoot.Clone();
          break;
        case MessageOneofCase.Clipboard:
          Clipboard = other.Clipboard.Clone();
          break;
        case MessageOneofCase.Suspending:
          Suspending = other.Suspending.Clone();
          break;
        case MessageOneofCase.HotKey:
          HotKey = other.HotKey;
          break;
        case MessageOneofCase.HotKeyBindingFailed:
          HotKeyBindingFailed = other.HotKeyBindingFailed;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GaCmdIn Clone() {
      return new GaCmdIn(this);
    }

    /// <summary>Field number for the "pong" field.</summary>
    public const int PongFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty Pong {
      get { return messageCase_ == MessageOneofCase.Pong ? (global::Google.Protobuf.WellKnownTypes.Empty) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pong;
      }
    }

    /// <summary>Field number for the "report_boot" field.</summary>
    public const int ReportBootFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty ReportBoot {
      get { return messageCase_ == MessageOneofCase.ReportBoot ? (global::Google.Protobuf.WellKnownTypes.Empty) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ReportBoot;
      }
    }

    /// <summary>Field number for the "clipboard" field.</summary>
    public const int ClipboardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ClientpipeProtocol.ClipboardMessage Clipboard {
      get { return messageCase_ == MessageOneofCase.Clipboard ? (global::ClientpipeProtocol.ClipboardMessage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Clipboard;
      }
    }

    /// <summary>Field number for the "suspending" field.</summary>
    public const int SuspendingFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty Suspending {
      get { return messageCase_ == MessageOneofCase.Suspending ? (global::Google.Protobuf.WellKnownTypes.Empty) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Suspending;
      }
    }

    /// <summary>Field number for the "hot_key" field.</summary>
    public const int HotKeyFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HotKey {
      get { return messageCase_ == MessageOneofCase.HotKey ? (uint) message_ : 0; }
      set {
        message_ = value;
        messageCase_ = MessageOneofCase.HotKey;
      }
    }

    /// <summary>Field number for the "hot_key_binding_failed" field.</summary>
    public const int HotKeyBindingFailedFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HotKeyBindingFailed {
      get { return messageCase_ == MessageOneofCase.HotKeyBindingFailed ? (string) message_ : ""; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        messageCase_ = MessageOneofCase.HotKeyBindingFailed;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Pong = 1,
      ReportBoot = 2,
      Clipboard = 3,
      Suspending = 16,
      HotKey = 17,
      HotKeyBindingFailed = 18,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GaCmdIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GaCmdIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pong, other.Pong)) return false;
      if (!object.Equals(ReportBoot, other.ReportBoot)) return false;
      if (!object.Equals(Clipboard, other.Clipboard)) return false;
      if (!object.Equals(Suspending, other.Suspending)) return false;
      if (HotKey != other.HotKey) return false;
      if (HotKeyBindingFailed != other.HotKeyBindingFailed) return false;
      if (MessageCase != other.MessageCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Pong) hash ^= Pong.GetHashCode();
      if (messageCase_ == MessageOneofCase.ReportBoot) hash ^= ReportBoot.GetHashCode();
      if (messageCase_ == MessageOneofCase.Clipboard) hash ^= Clipboard.GetHashCode();
      if (messageCase_ == MessageOneofCase.Suspending) hash ^= Suspending.GetHashCode();
      if (messageCase_ == MessageOneofCase.HotKey) hash ^= HotKey.GetHashCode();
      if (messageCase_ == MessageOneofCase.HotKeyBindingFailed) hash ^= HotKeyBindingFailed.GetHashCode();
      hash ^= (int) messageCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Pong) {
        output.WriteRawTag(10);
        output.WriteMessage(Pong);
      }
      if (messageCase_ == MessageOneofCase.ReportBoot) {
        output.WriteRawTag(18);
        output.WriteMessage(ReportBoot);
      }
      if (messageCase_ == MessageOneofCase.Clipboard) {
        output.WriteRawTag(26);
        output.WriteMessage(Clipboard);
      }
      if (messageCase_ == MessageOneofCase.Suspending) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Suspending);
      }
      if (messageCase_ == MessageOneofCase.HotKey) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(HotKey);
      }
      if (messageCase_ == MessageOneofCase.HotKeyBindingFailed) {
        output.WriteRawTag(146, 1);
        output.WriteString(HotKeyBindingFailed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Pong) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pong);
      }
      if (messageCase_ == MessageOneofCase.ReportBoot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportBoot);
      }
      if (messageCase_ == MessageOneofCase.Clipboard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clipboard);
      }
      if (messageCase_ == MessageOneofCase.Suspending) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Suspending);
      }
      if (messageCase_ == MessageOneofCase.HotKey) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HotKey);
      }
      if (messageCase_ == MessageOneofCase.HotKeyBindingFailed) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HotKeyBindingFailed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GaCmdIn other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Pong:
          Pong = other.Pong;
          break;
        case MessageOneofCase.ReportBoot:
          ReportBoot = other.ReportBoot;
          break;
        case MessageOneofCase.Clipboard:
          Clipboard = other.Clipboard;
          break;
        case MessageOneofCase.Suspending:
          Suspending = other.Suspending;
          break;
        case MessageOneofCase.HotKey:
          HotKey = other.HotKey;
          break;
        case MessageOneofCase.HotKeyBindingFailed:
          HotKeyBindingFailed = other.HotKeyBindingFailed;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (messageCase_ == MessageOneofCase.Pong) {
              subBuilder.MergeFrom(Pong);
            }
            input.ReadMessage(subBuilder);
            Pong = subBuilder;
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (messageCase_ == MessageOneofCase.ReportBoot) {
              subBuilder.MergeFrom(ReportBoot);
            }
            input.ReadMessage(subBuilder);
            ReportBoot = subBuilder;
            break;
          }
          case 26: {
            global::ClientpipeProtocol.ClipboardMessage subBuilder = new global::ClientpipeProtocol.ClipboardMessage();
            if (messageCase_ == MessageOneofCase.Clipboard) {
              subBuilder.MergeFrom(Clipboard);
            }
            input.ReadMessage(subBuilder);
            Clipboard = subBuilder;
            break;
          }
          case 130: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (messageCase_ == MessageOneofCase.Suspending) {
              subBuilder.MergeFrom(Suspending);
            }
            input.ReadMessage(subBuilder);
            Suspending = subBuilder;
            break;
          }
          case 136: {
            HotKey = input.ReadUInt32();
            break;
          }
          case 146: {
            HotKeyBindingFailed = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
